import numpy as np
import matplotlib.pyplot as plt
import matplotlib
from sklearn.metrics import mean_squared_error
matplotlib.use('TkAgg')
#Interpolacja przyjmuje wartości x i y funkcji interpolowanej oraz x na których chcemy przeprowadzić interpolacje, oraz kernel, który determinuje w jaki sposób interpolacja będzie przebiegać
def interpolate(x_vals, y_vals, x_interp, kernel):
    #inicjalizacja tablicy na wartości y
    y_interp = []
    #iteracja poprzez wszystkie wartości x_interp, dla każdego inicjalizacja wagi
    for j in range(len(x_interp)):
        contribution = 0
        total_weight = 0
        #iteracja poprzez wszystkie wartości x_vals, dla każdego obliczanie wagi
        for i in range(len(x_vals)):
            if i < len(x_vals)-1:
                width = x_vals[i+1] - x_vals[i]
            weight = kernel(x_vals[i], x_interp[j], width)
            contribution += y_vals[i] * weight
            total_weight += weight
        if total_weight > 0:
            y_interp.append(contribution / total_weight)
    return y_interp

#Funckja nr 1
def f1(x):
    return np.sin(x)
#Funckja nr 1
def f2(x):
    return np.sin(x**(-1))
#Funckja nr 1
def f3(x):
    return np.sign(np.sin(8*x))

#sample hold
def h1(original_x, new_x, width):
    return original_x  <= new_x < original_x +width

#nearest neighbor
def h2(original_x, new_x, width):
    return (original_x - width/2 < new_x <= original_x + width/2)
#linear
def h3(original_x, new_x, width):
    t = (original_x - new_x) / width
    if 1 - abs(t) > 0:
        return 1 - abs(t)
    return 0

x_vals = np.linspace(-np.pi,np.pi,100)
y_vals = f1(x_vals)
x_interp_1 = np.linspace(-np.pi, np.pi, 200)
x_interp_2 = np.linspace(-np.pi, np.pi, 400)
x_interp_3 = np.linspace(-np.pi, np.pi, 1000)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h1)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h1)
y_check_1 = f1(x_interp_1)
y_check_2 = f1(x_interp_2)
y_check_3 = f1(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Sample Hold dla 400")
plt.plot(x_interp_3,y_interp_3,label="Kernel Sample Hold dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f1 z użyciem Kernela Sample Hold")
plt.legend()
print(f"MSE dla 200 Kernel Sample Hold:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Kernel Sample Hold:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Kernel Sample Hold:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h2)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h2)
y_check_1 = f1(x_interp_1)
y_check_2 = f1(x_interp_2)
y_check_3 = f1(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Nearest Neighbor dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 400")
plt.plot(x_interp_3,y_interp_3,label="Kernel Nearest Neighbor dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f1 z użyciem Kernela Nearest Neighbor")
plt.legend()
print(f"MSE dla 200 Kernel Nearest Neighbour:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Kernel Nearest Neighbour:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Kernel Nearest Neighbour:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h3)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h3)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
y_check_1 = f1(x_interp_1)
y_check_2 = f1(x_interp_2)
y_check_3 = f1(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Linear Kernel dla 200")
plt.plot(x_interp_2,y_interp_2,label="Linear Kernel dla 400")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f1 z użyciem Linear Kernel")
plt.legend()
print(f"MSE dla 200 Linear Kernel:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Linear Kernel:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Linear Kernel:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

x_interp_1 = np.linspace(-np.pi, np.pi, 200)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 200)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 200)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 200")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 200")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 200")
plt.legend()

x_interp_1 = np.linspace(-np.pi, np.pi, 400)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 400)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 400)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 400")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 400")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 400")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 400")
plt.legend()

x_interp_1 = np.linspace(-np.pi, np.pi, 1000)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 1000)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 1000)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 1000")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 1000")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 1000")
plt.legend()

x_vals = np.linspace(-np.pi,np.pi,100)
y_vals = f2(x_vals)
x_interp_1 = np.linspace(-np.pi, np.pi, 200)
x_interp_2 = np.linspace(-np.pi, np.pi, 400)
x_interp_3 = np.linspace(-np.pi, np.pi, 1000)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h1)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h1)
y_check_1 = f2(x_interp_1)
y_check_2 = f2(x_interp_2)
y_check_3 = f2(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Sample Hold dla 400")
plt.plot(x_interp_3,y_interp_3,label="Kernel Sample Hold dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f2 z użyciem Kernela Sample Hold")
plt.legend()
print(f"MSE dla 200 Kernel Sample Hold:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Kernel Sample Hold:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Kernel Sample Hold:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h2)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h2)
y_check_1 = f2(x_interp_1)
y_check_2 = f2(x_interp_2)
y_check_3 = f2(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Nearest Neighbor dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 400")
plt.plot(x_interp_3,y_interp_3,label="Kernel Nearest Neighbor dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f2 z użyciem Kernela Nearest Neighbor")
plt.legend()
print(f"MSE dla 200 Kernel Nearest Neighbour:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Kernel Nearest Neighbour:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Kernel Nearest Neighbour:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h3)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h3)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
y_check_1 = f2(x_interp_1)
y_check_2 = f2(x_interp_2)
y_check_3 = f2(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Linear Kernel dla 200")
plt.plot(x_interp_2,y_interp_2,label="Linear Kernel dla 400")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f2 z użyciem Linear Kernel")
plt.legend()
print(f"MSE dla 200 Linear Kernel:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Linear Kernel:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Linear Kernel:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

x_interp_1 = np.linspace(-np.pi, np.pi, 200)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 200)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 200)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 200")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 200")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 200")
plt.legend()

x_interp_1 = np.linspace(-np.pi, np.pi, 400)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 400)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 400)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 400")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 400")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 400")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 400")
plt.legend()

x_interp_1 = np.linspace(-np.pi, np.pi, 1000)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 1000)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 1000)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 1000")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 1000")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 1000")
plt.legend()

x_vals = np.linspace(-np.pi,np.pi,100)
y_vals = f3(x_vals)
x_interp_1 = np.linspace(-np.pi, np.pi, 200)
x_interp_2 = np.linspace(-np.pi, np.pi, 400)
x_interp_3 = np.linspace(-np.pi, np.pi, 1000)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h1)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h1)
y_check_1 = f3(x_interp_1)
y_check_2 = f3(x_interp_2)
y_check_3 = f3(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Sample Hold dla 400")
plt.plot(x_interp_3,y_interp_3,label="Kernel Sample Hold dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f3 z użyciem Kernela Sample Hold")
plt.legend()
print(f"MSE dla 200 Kernel Sample Hold:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Kernel Sample Hold:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Kernel Sample Hold:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h2)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h2)
y_check_1 = f3(x_interp_1)
y_check_2 = f3(x_interp_2)
y_check_3 = f3(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Nearest Neighbor dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 400")
plt.plot(x_interp_3,y_interp_3,label="Kernel Nearest Neighbor dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f3 z użyciem Kernela Nearest Neighbor")
plt.legend()
print(f"MSE dla 200 Kernel Nearest Neighbour:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Kernel Nearest Neighbour:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Kernel Nearest Neighbour:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h3)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h3)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
y_check_1 = f3(x_interp_1)
y_check_2 = f3(x_interp_2)
y_check_3 = f3(x_interp_3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Linear Kernel dla 200")
plt.plot(x_interp_2,y_interp_2,label="Linear Kernel dla 400")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interpolacja funkcji f3 z użyciem Linear Kernel")
plt.legend()
print(f"MSE dla 200 Linear Kernel:{mean_squared_error(y_check_1,y_interp_1)}")
print(f"MSE dla 400 Linear Kernel:{mean_squared_error(y_check_2,y_interp_2)}")
print(f"MSE dla 1000 Linear Kernel:{mean_squared_error(y_check_3,y_interp_3)}")
print(mean_squared_error(y_check_2,y_interp_2)-mean_squared_error(y_check_1,y_interp_1),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_2,y_interp_2),mean_squared_error(y_check_3,y_interp_3)-mean_squared_error(y_check_1,y_interp_1))

x_interp_1 = np.linspace(-np.pi, np.pi, 200)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 200)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 200)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 200")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 200")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 200")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 200")
plt.legend()

x_interp_1 = np.linspace(-np.pi, np.pi, 400)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 400)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 400)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 400")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 400")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 400")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 400")
plt.legend()

x_interp_1 = np.linspace(-np.pi, np.pi, 1000)
y_interp_1 = interpolate(x_vals,y_vals,x_interp_1,h1)
x_interp_2 = np.linspace(-np.pi, np.pi, 1000)
y_interp_2 = interpolate(x_vals,y_vals,x_interp_2,h2)
x_interp_3 = np.linspace(-np.pi, np.pi, 1000)
y_interp_3 = interpolate(x_vals,y_vals,x_interp_3,h3)
plt.figure(figsize=(10,5))
plt.plot(x_vals,y_vals, label="Funkcja Orginalna")
plt.plot(x_interp_1,y_interp_1,label="Kernel Sample Hold dla 1000")
plt.plot(x_interp_2,y_interp_2,label="Kernel Nearest Neighbor dla 1000")
plt.plot(x_interp_3,y_interp_3,label="Linear Kernel dla 1000")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Porównanie różnych kerneli dla 1000")
plt.legend()


plt.show()


